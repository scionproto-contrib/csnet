/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/crypto/v1/signed.proto */

#ifndef PROTOBUF_C_proto_2fcrypto_2fv1_2fsigned_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fcrypto_2fv1_2fsigned_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct _Proto__Crypto__V1__SignedMessage Proto__Crypto__V1__SignedMessage;
typedef struct _Proto__Crypto__V1__Header Proto__Crypto__V1__Header;
typedef struct _Proto__Crypto__V1__HeaderAndBodyInternal Proto__Crypto__V1__HeaderAndBodyInternal;


/* --- enums --- */

typedef enum _Proto__Crypto__V1__SignatureAlgorithm {
  /*
   * Unspecified signature algorithm. This value is never valid.
   */
  PROTO__CRYPTO__V1__SIGNATURE_ALGORITHM__SIGNATURE_ALGORITHM_UNSPECIFIED = 0,
  /*
   * ECDS with SHA256.
   */
  PROTO__CRYPTO__V1__SIGNATURE_ALGORITHM__SIGNATURE_ALGORITHM_ECDSA_WITH_SHA256 = 1,
  /*
   * ECDS with SHA384.
   */
  PROTO__CRYPTO__V1__SIGNATURE_ALGORITHM__SIGNATURE_ALGORITHM_ECDSA_WITH_SHA384 = 2,
  /*
   * ECDS with SHA512.
   */
  PROTO__CRYPTO__V1__SIGNATURE_ALGORITHM__SIGNATURE_ALGORITHM_ECDSA_WITH_SHA512 = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__CRYPTO__V1__SIGNATURE_ALGORITHM)
} Proto__Crypto__V1__SignatureAlgorithm;

/* --- messages --- */

struct  _Proto__Crypto__V1__SignedMessage
{
  ProtobufCMessage base;
  /*
   * Encoded header and body.
   */
  ProtobufCBinaryData header_and_body;
  /*
   * Raw signature. The signature is computed over the concatenation of the
   * header and body, and the optional associated data.
   */
  ProtobufCBinaryData signature;
};
#define PROTO__CRYPTO__V1__SIGNED_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto__v1__signed_message__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _Proto__Crypto__V1__Header
{
  ProtobufCMessage base;
  /*
   * Algorithm used to compute the signature.
   */
  Proto__Crypto__V1__SignatureAlgorithm signature_algorithm;
  /*
   * Optional arbitrary per-protocol key identifier.
   */
  ProtobufCBinaryData verification_key_id;
  /*
   * Optional signature creation timestamp.
   */
  Google__Protobuf__Timestamp *timestamp;
  /*
   * Optional arbitrary per-protocol metadata.
   */
  ProtobufCBinaryData metadata;
  /*
   * Length of associated data that is covered by the signature, but is not
   * included in the header and body. This is zero, if no associated data is
   * covered by the signature.
   */
  int32_t associated_data_length;
};
#define PROTO__CRYPTO__V1__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto__v1__header__descriptor) \
    , PROTO__CRYPTO__V1__SIGNATURE_ALGORITHM__SIGNATURE_ALGORITHM_UNSPECIFIED, {0,NULL}, NULL, {0,NULL}, 0 }


/*
 * Low-level representation of HeaderAndBody used for signature computation
 * input. This should not be used by external code.
 */
struct  _Proto__Crypto__V1__HeaderAndBodyInternal
{
  ProtobufCMessage base;
  /*
   * Enocded header suitable for signature computation.
   */
  ProtobufCBinaryData header;
  /*
   * Raw payload suitable for signature computation.
   */
  ProtobufCBinaryData body;
};
#define PROTO__CRYPTO__V1__HEADER_AND_BODY_INTERNAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__crypto__v1__header_and_body_internal__descriptor) \
    , {0,NULL}, {0,NULL} }


/* Proto__Crypto__V1__SignedMessage methods */
void   proto__crypto__v1__signed_message__init
                     (Proto__Crypto__V1__SignedMessage         *message);
size_t proto__crypto__v1__signed_message__get_packed_size
                     (const Proto__Crypto__V1__SignedMessage   *message);
size_t proto__crypto__v1__signed_message__pack
                     (const Proto__Crypto__V1__SignedMessage   *message,
                      uint8_t             *out);
size_t proto__crypto__v1__signed_message__pack_to_buffer
                     (const Proto__Crypto__V1__SignedMessage   *message,
                      ProtobufCBuffer     *buffer);
Proto__Crypto__V1__SignedMessage *
       proto__crypto__v1__signed_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto__v1__signed_message__free_unpacked
                     (Proto__Crypto__V1__SignedMessage *message,
                      ProtobufCAllocator *allocator);
/* Proto__Crypto__V1__Header methods */
void   proto__crypto__v1__header__init
                     (Proto__Crypto__V1__Header         *message);
size_t proto__crypto__v1__header__get_packed_size
                     (const Proto__Crypto__V1__Header   *message);
size_t proto__crypto__v1__header__pack
                     (const Proto__Crypto__V1__Header   *message,
                      uint8_t             *out);
size_t proto__crypto__v1__header__pack_to_buffer
                     (const Proto__Crypto__V1__Header   *message,
                      ProtobufCBuffer     *buffer);
Proto__Crypto__V1__Header *
       proto__crypto__v1__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto__v1__header__free_unpacked
                     (Proto__Crypto__V1__Header *message,
                      ProtobufCAllocator *allocator);
/* Proto__Crypto__V1__HeaderAndBodyInternal methods */
void   proto__crypto__v1__header_and_body_internal__init
                     (Proto__Crypto__V1__HeaderAndBodyInternal         *message);
size_t proto__crypto__v1__header_and_body_internal__get_packed_size
                     (const Proto__Crypto__V1__HeaderAndBodyInternal   *message);
size_t proto__crypto__v1__header_and_body_internal__pack
                     (const Proto__Crypto__V1__HeaderAndBodyInternal   *message,
                      uint8_t             *out);
size_t proto__crypto__v1__header_and_body_internal__pack_to_buffer
                     (const Proto__Crypto__V1__HeaderAndBodyInternal   *message,
                      ProtobufCBuffer     *buffer);
Proto__Crypto__V1__HeaderAndBodyInternal *
       proto__crypto__v1__header_and_body_internal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__crypto__v1__header_and_body_internal__free_unpacked
                     (Proto__Crypto__V1__HeaderAndBodyInternal *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__Crypto__V1__SignedMessage_Closure)
                 (const Proto__Crypto__V1__SignedMessage *message,
                  void *closure_data);
typedef void (*Proto__Crypto__V1__Header_Closure)
                 (const Proto__Crypto__V1__Header *message,
                  void *closure_data);
typedef void (*Proto__Crypto__V1__HeaderAndBodyInternal_Closure)
                 (const Proto__Crypto__V1__HeaderAndBodyInternal *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    proto__crypto__v1__signature_algorithm__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto__v1__signed_message__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto__v1__header__descriptor;
extern const ProtobufCMessageDescriptor proto__crypto__v1__header_and_body_internal__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fcrypto_2fv1_2fsigned_2eproto__INCLUDED */
